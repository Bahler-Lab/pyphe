#!/usr/bin/env python

import argparse
from skimage.io.collection import ImageCollection
from pyphe import quantify, analysis

if __name__ == '__main__':
    ###Set up parsing of command line arguments with argparse###
    parser = argparse.ArgumentParser(description='Welcome to pyphe-quantify, part of the pyphe toolbox. Written by stephan.kamrad@crick.ac.uk and maintained at https://github.com/Bahler-Lab/pyphe')
  
    parser.add_argument('mode', type=str, choices=['batch', 'timecourse', 'redness'], help='')
    
    parser.add_argument('--grid', type=str, help='')
    parser.add_argument('--pattern', type=str, default='*.jpg', help='')
    parser.add_argument('--t', type=float, default=1, help='')
    parser.add_argument('--d', type=float, default=3, help='')
    parser.add_argument('--s', type=int, default=1, help='')
    parser.add_argument('--negate', type=bool, default=True, help='Ignored in redness mode.')
    parser.add_argument('--reportAll', default=False, action='store_true', help='')
    parser.add_argument('--reportFileNames', default=False, action='store_true', help='Only for timecourse mode, otherwise ignored. Use filenames as index for output table instead of timepoints. Useful when the ordering of timepoints is not the same as returned by the pattern.')
    parser.add_argument('--hardImageThreshold', type=float, help='')
    parser.add_argument('--hardSizeThreshold', type=float, help='')
    parser.add_argument('--qc', type=str, default='qc_images', help='Directory to save qc images in. Defaults to "qc_images".')
    parser.add_argument('--out', type=str, default='pyphe_quant', help='Directory to save output files in. Defaults to "pyphe_quant".')

    args = parser.parse_args()
    
    #Check that coefficients are within bounds
    if not args.t > 0:
        raise ValueError('t must be > 0.')
    if not args.d > 2:
        raise ValueError('d must be > 2.')
    if not args.s>0:
        raise ValueError('s must be > 0.')
    
    ###Load images as collection###
    images = ImageCollection(args.pattern, conserve_memory=True)
    if not len(images) > 0:
        raise ValueError('No images to analyse. By default all .jpg images in the current working directory will be analysed. The folder and file type can be changed using the --pattern option')
    print('Starting analysis of %i images in %s mode'%(len(images), args.mode))
    
    ###Make grid###
    #Predefined grids
    grid = args.grid
    if grid == 'som3_96':
        grid = '8-12-1-2-3-4'
    if grid == 'som3_384':
        grid = '16-24-1-2-3-4'
    if grid == 'som3_1536':
        grid = '32-48-43-50-2545-1690'
        
    #If user defined grid, check if in the right format
    if not len(grid.split('-'))==6:
        raise ValueError('Grid definition not in correct format. Must be one of som3_96, som3_384, som3_1536 or a custom grid definition consisting of 6 integers separated by "-".')
    
    grid = grid.split('-')
    try:
        grid = list(map(int, grid))
    except Exception:
        raise ValueError('Grid definition not in correct format. Must be one of som3_96, som3_384, som3_1536 or a custom grid definition consisting of 6 integers separated by "-".')
    
    #Create grid
    grid, griddist = quantify.make_grid(grid)
    
    #Create output folders
    analysis.check_mkdir(args.out)
    analysis.check_mkdir(args.qc)

    ###Start analysis###
    arg_dict = dict(vars(args))
    argstr = '\n    '.join(['%s: %s'%(k,str(v)) for k,v in arg_dict.items()])
    print('Starting analysis with the following parameters:\n%s'%argstr)
    arg_dict.pop('grid')
    arg_dict.pop('mode')
    arg_dict.pop('pattern')

    if (args.mode == 'batch') or (args.mode == 'redness'):
        quantify.quantify_batch(images, grid, griddist, args.mode, **arg_dict)        
    if args.mode == 'timecourse':
        quantify.quantify_timecourse(images, grid, griddist, **arg_dict)        
       
    print('Analysis complete.')


